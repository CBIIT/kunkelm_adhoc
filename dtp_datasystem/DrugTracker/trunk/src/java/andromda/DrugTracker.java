// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package andromda;

import java.io.Serializable;
import java.util.Collection;
import java.util.HashSet;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class DrugTracker
    implements Serializable, Comparable<DrugTracker>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 7851250929468130199L;

    // Generate 4 attributes
    private String agent;

    /**
     * 
     * @return this.agent String
     */
    public String getAgent()
    {
        return this.agent;
    }

    /**
     * 
     * @param agentIn String
     */
    public void setAgent(String agentIn)
    {
        this.agent = agentIn;
    }

    private String originator;

    /**
     * 
     * @return this.originator String
     */
    public String getOriginator()
    {
        return this.originator;
    }

    /**
     * 
     * @param originatorIn String
     */
    public void setOriginator(String originatorIn)
    {
        this.originator = originatorIn;
    }

    private String cas;

    /**
     * 
     * @return this.cas String
     */
    public String getCas()
    {
        return this.cas;
    }

    /**
     * 
     * @param casIn String
     */
    public void setCas(String casIn)
    {
        this.cas = casIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 4 associations
    private Collection<DrugTrackerPlate> drugTrackerPlates = new HashSet<DrugTrackerPlate>();

    /**
     * 
     * @return this.drugTrackerPlates Collection<DrugTrackerPlate>
     */
    public Collection<DrugTrackerPlate> getDrugTrackerPlates()
    {
        return this.drugTrackerPlates;
    }

    /**
     * 
     * @param drugTrackerPlatesIn Collection<DrugTrackerPlate>
     */
    public void setDrugTrackerPlates(Collection<DrugTrackerPlate> drugTrackerPlatesIn)
    {
        this.drugTrackerPlates = drugTrackerPlatesIn;
    }

    /**
     * 
     * @param elementToAdd DrugTrackerPlate
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addDrugTrackerPlates(DrugTrackerPlate elementToAdd)
    {
        return this.drugTrackerPlates.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove DrugTrackerPlate
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeDrugTrackerPlates(DrugTrackerPlate elementToRemove)
    {
        return this.drugTrackerPlates.remove(elementToRemove);
    }

    private Collection<DrugTrackerAlias> drugTrackerAliases = new HashSet<DrugTrackerAlias>();

    /**
     * 
     * @return this.drugTrackerAliases Collection<DrugTrackerAlias>
     */
    public Collection<DrugTrackerAlias> getDrugTrackerAliases()
    {
        return this.drugTrackerAliases;
    }

    /**
     * 
     * @param drugTrackerAliasesIn Collection<DrugTrackerAlias>
     */
    public void setDrugTrackerAliases(Collection<DrugTrackerAlias> drugTrackerAliasesIn)
    {
        this.drugTrackerAliases = drugTrackerAliasesIn;
    }

    /**
     * 
     * @param elementToAdd DrugTrackerAlias
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addDrugTrackerAliases(DrugTrackerAlias elementToAdd)
    {
        return this.drugTrackerAliases.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove DrugTrackerAlias
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeDrugTrackerAliases(DrugTrackerAlias elementToRemove)
    {
        return this.drugTrackerAliases.remove(elementToRemove);
    }

    private Collection<DrugTrackerTarget> drugTrackerTargets = new HashSet<DrugTrackerTarget>();

    /**
     * 
     * @return this.drugTrackerTargets Collection<DrugTrackerTarget>
     */
    public Collection<DrugTrackerTarget> getDrugTrackerTargets()
    {
        return this.drugTrackerTargets;
    }

    /**
     * 
     * @param drugTrackerTargetsIn Collection<DrugTrackerTarget>
     */
    public void setDrugTrackerTargets(Collection<DrugTrackerTarget> drugTrackerTargetsIn)
    {
        this.drugTrackerTargets = drugTrackerTargetsIn;
    }

    /**
     * 
     * @param elementToAdd DrugTrackerTarget
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addDrugTrackerTargets(DrugTrackerTarget elementToAdd)
    {
        return this.drugTrackerTargets.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove DrugTrackerTarget
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeDrugTrackerTargets(DrugTrackerTarget elementToRemove)
    {
        return this.drugTrackerTargets.remove(elementToRemove);
    }

    private Collection<DrugTrackerSet> drugTrackerSets = new HashSet<DrugTrackerSet>();

    /**
     * 
     * @return this.drugTrackerSets Collection<DrugTrackerSet>
     */
    public Collection<DrugTrackerSet> getDrugTrackerSets()
    {
        return this.drugTrackerSets;
    }

    /**
     * 
     * @param drugTrackerSetsIn Collection<DrugTrackerSet>
     */
    public void setDrugTrackerSets(Collection<DrugTrackerSet> drugTrackerSetsIn)
    {
        this.drugTrackerSets = drugTrackerSetsIn;
    }

    /**
     * 
     * @param elementToAdd DrugTrackerSet
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addDrugTrackerSets(DrugTrackerSet elementToAdd)
    {
        return this.drugTrackerSets.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove DrugTrackerSet
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeDrugTrackerSets(DrugTrackerSet elementToRemove)
    {
        return this.drugTrackerSets.remove(elementToRemove);
    }

    /**
     * Returns <code>true</code> if the argument is an DrugTracker instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof DrugTracker))
        {
            return false;
        }
        final DrugTracker that = (DrugTracker)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(DrugTracker o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getAgent() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getAgent().compareTo(o.getAgent()));
            }
            if (this.getOriginator() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getOriginator().compareTo(o.getOriginator()));
            }
            if (this.getCas() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCas().compareTo(o.getCas()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}