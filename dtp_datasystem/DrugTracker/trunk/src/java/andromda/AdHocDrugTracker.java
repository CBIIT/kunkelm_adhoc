// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package andromda;

import java.util.Collection;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class AdHocDrugTracker
    extends DrugTrackerImpl
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 787220925605751653L;

    // Generate 11 attributes
    private String structureSource;

    /**
     * 
     * @return this.structureSource String
     */
    public String getStructureSource()
    {
        return this.structureSource;
    }

    /**
     * 
     * @param structureSourceIn String
     */
    public void setStructureSource(String structureSourceIn)
    {
        this.structureSource = structureSourceIn;
    }

    private String smiles;

    /**
     * 
     * @return this.smiles String
     */
    public String getSmiles()
    {
        return this.smiles;
    }

    /**
     * 
     * @param smilesIn String
     */
    public void setSmiles(String smilesIn)
    {
        this.smiles = smilesIn;
    }

    private String removedSalts;

    /**
     * 
     * @return this.removedSalts String
     */
    public String getRemovedSalts()
    {
        return this.removedSalts;
    }

    /**
     * 
     * @param removedSaltsIn String
     */
    public void setRemovedSalts(String removedSaltsIn)
    {
        this.removedSalts = removedSaltsIn;
    }

    private Double mw;

    /**
     * 
     * @return this.mw Double
     */
    public Double getMw()
    {
        return this.mw;
    }

    /**
     * 
     * @param mwIn Double
     */
    public void setMw(Double mwIn)
    {
        this.mw = mwIn;
    }

    private String mf;

    /**
     * 
     * @return this.mf String
     */
    public String getMf()
    {
        return this.mf;
    }

    /**
     * 
     * @param mfIn String
     */
    public void setMf(String mfIn)
    {
        this.mf = mfIn;
    }

    private Double alogp;

    /**
     * 
     * @return this.alogp Double
     */
    public Double getAlogp()
    {
        return this.alogp;
    }

    /**
     * 
     * @param alogpIn Double
     */
    public void setAlogp(Double alogpIn)
    {
        this.alogp = alogpIn;
    }

    private Double logd;

    /**
     * 
     * @return this.logd Double
     */
    public Double getLogd()
    {
        return this.logd;
    }

    /**
     * 
     * @param logdIn Double
     */
    public void setLogd(Double logdIn)
    {
        this.logd = logdIn;
    }

    private Integer hba;

    /**
     * 
     * @return this.hba Integer
     */
    public Integer getHba()
    {
        return this.hba;
    }

    /**
     * 
     * @param hbaIn Integer
     */
    public void setHba(Integer hbaIn)
    {
        this.hba = hbaIn;
    }

    private Integer hbd;

    /**
     * 
     * @return this.hbd Integer
     */
    public Integer getHbd()
    {
        return this.hbd;
    }

    /**
     * 
     * @param hbdIn Integer
     */
    public void setHbd(Integer hbdIn)
    {
        this.hbd = hbdIn;
    }

    private Double sa;

    /**
     * 
     * @return this.sa Double
     */
    public Double getSa()
    {
        return this.sa;
    }

    /**
     * 
     * @param saIn Double
     */
    public void setSa(Double saIn)
    {
        this.sa = saIn;
    }

    private Double psa;

    /**
     * 
     * @return this.psa Double
     */
    public Double getPsa()
    {
        return this.psa;
    }

    /**
     * 
     * @param psaIn Double
     */
    public void setPsa(Double psaIn)
    {
        this.psa = psaIn;
    }

    // Generate 0 associations
    /**
     * This entity does not have any identifiers
     * but since it extends the <code>DrugTrackerImpl</code> class
     * it will simply delegate the call up there.
     *
     * @see mwk.drugtracker.domain.DrugTracker#equals(Object)
     */
    @Override
    public boolean equals(Object object)
    {
        return super.equals(object);
    }

    /**
     * This entity does not have any identifiers
     * but since it extends the <code>DrugTrackerImpl</code> class
     * it will simply delegate the call up there.
     *
     * @see mwk.drugtracker.domain.DrugTracker#hashCode()
     */
    @Override
    public int hashCode()
    {
        return super.hashCode();
    }

    /**
     * Constructs new instances of {@link AdHocDrugTracker}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link AdHocDrugTracker}.
         * @return new AdHocDrugTrackerImpl()
         */
        public static AdHocDrugTracker newInstance()
        {
            return new AdHocDrugTrackerImpl();
        }


        /**
         * Constructs a new instance of {@link AdHocDrugTracker}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param agent String
         * @param originator String
         * @param cas String
         * @param drugTrackerPlates Collection<DrugTrackerPlate>
         * @param drugTrackerAliases Collection<DrugTrackerAlias>
         * @param drugTrackerTargets Collection<DrugTrackerTarget>
         * @param drugTrackerSets Collection<DrugTrackerSet>
         * @param structureSource String
         * @param smiles String
         * @param removedSalts String
         * @param mw Double
         * @param mf String
         * @param alogp Double
         * @param logd Double
         * @param hba Integer
         * @param hbd Integer
         * @param sa Double
         * @param psa Double
         * @return newInstance AdHocDrugTracker
         */
        public static AdHocDrugTracker newInstance(String agent, String originator, String cas, Collection<DrugTrackerPlate> drugTrackerPlates, Collection<DrugTrackerAlias> drugTrackerAliases, Collection<DrugTrackerTarget> drugTrackerTargets, Collection<DrugTrackerSet> drugTrackerSets, String structureSource, String smiles, String removedSalts, Double mw, String mf, Double alogp, Double logd, Integer hba, Integer hbd, Double sa, Double psa)
        {
            final AdHocDrugTracker entity = new AdHocDrugTrackerImpl();
            entity.setAgent(agent);
            entity.setOriginator(originator);
            entity.setCas(cas);
            entity.setDrugTrackerPlates(drugTrackerPlates);
            entity.setDrugTrackerAliases(drugTrackerAliases);
            entity.setDrugTrackerTargets(drugTrackerTargets);
            entity.setDrugTrackerSets(drugTrackerSets);
            entity.setStructureSource(structureSource);
            entity.setSmiles(smiles);
            entity.setRemovedSalts(removedSalts);
            entity.setMw(mw);
            entity.setMf(mf);
            entity.setAlogp(alogp);
            entity.setLogd(logd);
            entity.setHba(hba);
            entity.setHbd(hbd);
            entity.setSa(sa);
            entity.setPsa(psa);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(AdHocDrugTracker o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getStructureSource() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStructureSource().compareTo(o.getStructureSource()));
            }
            if (this.getSmiles() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getSmiles().compareTo(o.getSmiles()));
            }
            if (this.getRemovedSalts() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getRemovedSalts().compareTo(o.getRemovedSalts()));
            }
            if (this.getMw() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getMw().compareTo(o.getMw()));
            }
            if (this.getMf() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getMf().compareTo(o.getMf()));
            }
            if (this.getAlogp() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getAlogp().compareTo(o.getAlogp()));
            }
            if (this.getLogd() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getLogd().compareTo(o.getLogd()));
            }
            if (this.getHba() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getHba().compareTo(o.getHba()));
            }
            if (this.getHbd() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getHbd().compareTo(o.getHbd()));
            }
            if (this.getSa() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getSa().compareTo(o.getSa()));
            }
            if (this.getPsa() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getPsa().compareTo(o.getPsa()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}