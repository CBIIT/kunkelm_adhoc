# Root logger option
log4j.rootLogger=INFO, file
 
# Direct log messages to a log file
log4j.appender.file=org.apache.log4j.RollingFileAppender
 
#Redirect to Tomcat logs folder
#log4j.appender.file.File=${catalina.home}/logs/logging.log
 
log4j.appender.file.File=/tmp/datasystem.log

log4j.appender.file.MaxFileSize=10MB
log4j.appender.file.MaxBackupIndex=10
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

# Direct log messages to stdout
# log4j.appender.stdout=org.apache.log4j.ConsoleAppender
# log4j.appender.stdout.Target=System.out
# log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

#http://stackoverflow.com/questions/9652032/how-can-i-create-2-separate-log-files-with-one-log4j-config-file
#
#log4j.rootLogger=TRACE, stdout, debugLog
#
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#log4j.appender.stdout.layout.ConversionPattern=%d [%24F:%t:%L] - %m%n
#
#log4j.appender.debugLog=org.apache.log4j.FileAppender
#log4j.appender.debugLog.File=logs/debug.log
#log4j.appender.debugLog.layout=org.apache.log4j.PatternLayout
#log4j.appender.debugLog.layout.ConversionPattern=%d [%24F:%t:%L] - %m%n
#
#log4j.reportsLog=DEBUG,reportsLog
#log4j.appender.reportsLog=org.apache.log4j.FileAppender
#log4j.appender.reportsLog.File=logs/reports.log
#log4j.appender.reportsLog.layout=org.apache.log4j.PatternLayout
#log4j.appender.reportsLog.layout.ConversionPattern=%d [%24F:%t:%L] - %m%n
#And here is my Java code:
#
#package test;
#
#import org.apache.log4j.Logger;
#import org.apache.log4j.PropertyConfigurator;
#
#public class HelloLogger {
#
#    static final Logger debugLog = Logger.getLogger("debugLog");
#    static final Logger resultLog = Logger.getLogger("reportsLog");
#
#    public static void main(String[] args) {
#        PropertyConfigurator.configure("log4j.properties");
#        debugLog.debug("Hello debugLog message");   
#        resultLog.debug("Hello reportsLog message");
#    }   
#}