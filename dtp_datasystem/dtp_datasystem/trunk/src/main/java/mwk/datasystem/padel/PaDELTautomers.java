package mwk.datasystem.padel;

import ambit2.smarts.SMIRKSManager;
import ambit2.smarts.SMIRKSReaction;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.openscience.cdk.CDKConstants;
import org.openscience.cdk.DefaultChemObjectBuilder;
import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.*;
import org.openscience.cdk.smiles.SmilesGenerator;
import org.openscience.cdk.smiles.SmilesParser;
import org.openscience.cdk.tools.CDKHydrogenAdder;
import org.openscience.cdk.tools.manipulator.AtomContainerManipulator;

public class PaDELTautomers {

  private String[] tautomerList_;

  public PaDELTautomers() {

  }

  public String[] getTautomerList() {
    return tautomerList_;
  }

  public void setTautomerList(String[] tautomerList) {
    tautomerList_ = tautomerList;
  }

  public void setTautomerList(File tautomerFile) {
    setTautomerList(getTautomerList(tautomerFile));
  }

  public static String[] getTautomerList(File tautomerFile) {
    ArrayList<String> tautomers = new ArrayList<String>();
    try {
      BufferedReader in = new BufferedReader(new FileReader(tautomerFile));
      String line;
      while ((line = in.readLine()) != null) {
        if (line.trim().isEmpty() || line.startsWith("//")) {
          continue;
        }
        String[] result = line.split("\\t");
        tautomers.add(result[0]);
      }
    } catch (Exception ex) {
      Logger.getLogger("global").log(Level.FINE, ex.getMessage());
      return null;
    }

    String[] tautomerList = new String[tautomers.size()];
    tautomers.toArray(tautomerList);
    return tautomerList;
  }

  public static String[] getTautomerList(InputStream is) {
    ArrayList<String> tautomers = new ArrayList<String>();
    try {
      BufferedReader in = new BufferedReader(new InputStreamReader(is));
      String line;
      while ((line = in.readLine()) != null) {
        if (line.trim().isEmpty() || line.startsWith("//")) {
          continue;
        }
        String[] result = line.split("\\t");
        tautomers.add(result[0]);
      }
    } catch (Exception ex) {
      Logger.getLogger("global").log(Level.FINE, ex.getMessage());
      return null;
    }

    String[] tautomerList = new String[tautomers.size()];
    tautomers.toArray(tautomerList);
    return tautomerList;
  }

  private void PerceiveAtomTypes(IAtomContainer molecule) throws CDKException {
    AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);
    // Ensure if bond is aromatic, corresponding atoms are aromatic too and vice versa.
    boolean hasModified = false;
    do {
      hasModified = false;
      for (IBond bond : molecule.bonds()) {
        if (bond.getFlag(CDKConstants.ISAROMATIC)) {
          for (IAtom atom : bond.atoms()) {
            if (!atom.getFlag(CDKConstants.ISAROMATIC)) {
              atom.setFlag(CDKConstants.ISAROMATIC, true);
              hasModified = true;
            }
          }
        }
      }

      for (IBond bond : molecule.bonds()) {
        if (!bond.getFlag(CDKConstants.ISAROMATIC)) {
          boolean allAtomsAromatic = true;
          for (IAtom atom : bond.atoms()) {
            if (!atom.getFlag(CDKConstants.ISAROMATIC)) {
              allAtomsAromatic = false;
              break;
            }
          }
          if (allAtomsAromatic) {
            if (!bond.getFlag(CDKConstants.ISAROMATIC)) {
              bond.setFlag(CDKConstants.ISAROMATIC, true);
              hasModified = true;
            }
          }
        }
      }
    } while (hasModified);
  }

  private IAtomContainer StandardizeTautomers(IAtomContainer molecule) throws CDKException {
    // Get molecule name.
    StringBuffer molName = new StringBuffer();
    molName.setLength(0);
    if (molecule.getProperty("cdk:Title") != null) {
      molName.append(molecule.getProperty("cdk:Title"));
    }

    // Add hydrogens. Necessary for InChITautomerGenerator.
    CDKHydrogenAdder adder = CDKHydrogenAdder.getInstance(DefaultChemObjectBuilder.getInstance());
    adder.addImplicitHydrogens(molecule);
    AtomContainerManipulator.convertImplicitToExplicitHydrogens(molecule);
    PerceiveAtomTypes(molecule);

        // Standardize tautomer using the first tautomer generated by InChITautomerGenerator.
//        InChITautomerGenerator tautomerGenerator = new InChITautomerGenerator();
//        List<IAtomContainer> tautomers = null;
//        try
//        {
//            tautomers = tautomerGenerator.getTautomers(molecule);
//            if (retain3D_)
//            {
//                molecule = tautomers.get(0);
//            }
//            else
//            {
//                molecule = new SmilesParser(DefaultChemObjectBuilder.getInstance()).parseSmiles(new SmilesGenerator().createSMILES(tautomers.get(0)));
//                molecule.setProperty("cdk:Title", molName.toString());
//            }
//        }
//        catch (Exception ex)
//        {
//            StringWriter sw = new StringWriter();
//            ex.printStackTrace(new PrintWriter(sw));
//            String exceptionAsString = sw.toString();
//            Logger.getLogger("global").log(Level.FINE, "InChITautomerGenerator:" + molName.toString() + ":" + exceptionAsString);
//        }

//
    
//        // Standardize tautomer using ambit2
//        TautomerManager tautMan = new TautomerManager();
//        try
//        {
//            tautMan.setStructure(molecule);
//            tautomers = tautMan.generateTautomers();
//            if (tautomers.size()>1)
//            {
//                if (retain3D_)
//                {
//                    molecule = tautomers.get(1);
//                }
//                else
//                {
//                    molecule = new SmilesParser(DefaultChemObjectBuilder.getInstance()).parseSmiles(new SmilesGenerator().createSMILES(tautomers.get(1)));
//                    molecule.setProperty("cdk:Title", molName.toString());
//                }
//            }
//        }
//        catch (Exception ex)
//        {
//            Logger.getLogger("global").log(Level.FINE, "TautomerManager:" + molName.toString() + ":" + ex.toString());
//        }
    // Standardize tautomers using a list.
    if (tautomerList_ != null) {
      int curPos = 0;
      int lastPosTransform = -1;
      int remainingLoops = 100;
      boolean nextLoop = true;
      int maxTautomerList = tautomerList_.length;
      SMIRKSManager smrkMan = new SMIRKSManager();
      do {
        String smirks = tautomerList_[curPos];
        SMIRKSReaction reaction = smrkMan.parse(smirks);
        try {
          if (lastPosTransform == curPos) {
            nextLoop = false;
          } else if (smrkMan.applyTransformation(molecule, reaction)) {
            lastPosTransform = curPos;
            if (!retain3D_) {
              molecule = new SmilesParser(DefaultChemObjectBuilder.getInstance()).parseSmiles(new SmilesGenerator(true).createSMILES(molecule));
              molecule.setProperty("cdk:Title", molName.toString());
            }
          }
        } catch (Exception ex) {
          Logger.getLogger("global").log(Level.FINE, "SMIRKSManager:" + molName.toString() + ":" + ex.getMessage());
        }

        if (curPos == (maxTautomerList - 1)) {
          if (lastPosTransform == -1) {
            nextLoop = false;
          } else {
            curPos = 0;
          }
        } else {
          ++curPos;
        }
        --remainingLoops;
      } while (nextLoop && (remainingLoops > 0));
    }

    return molecule;
  }

}
