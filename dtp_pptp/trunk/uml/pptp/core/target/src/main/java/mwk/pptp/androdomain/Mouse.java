// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package mwk.pptp.androdomain;

import java.io.Serializable;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class Mouse
    implements Serializable, Comparable<Mouse>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 4317257208370680718L;

    // Generate 4 attributes
    private Integer mouseNumber;

    /**
     * 
     * @return this.mouseNumber Integer
     */
    public Integer getMouseNumber()
    {
        return this.mouseNumber;
    }

    /**
     * 
     * @param mouseNumberIn Integer
     */
    public void setMouseNumber(Integer mouseNumberIn)
    {
        this.mouseNumber = mouseNumberIn;
    }

    private Double tumorVolume;

    /**
     * 
     * @return this.tumorVolume Double
     */
    public Double getTumorVolume()
    {
        return this.tumorVolume;
    }

    /**
     * 
     * @param tumorVolumeIn Double
     */
    public void setTumorVolume(Double tumorVolumeIn)
    {
        this.tumorVolume = tumorVolumeIn;
    }

    private Double logTumorVolume;

    /**
     * 
     * @return this.logTumorVolume Double
     */
    public Double getLogTumorVolume()
    {
        return this.logTumorVolume;
    }

    /**
     * 
     * @param logTumorVolumeIn Double
     */
    public void setLogTumorVolume(Double logTumorVolumeIn)
    {
        this.logTumorVolume = logTumorVolumeIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 1 associations
    private MouseGroup mouseGroup;

    /**
     * 
     * @return this.mouseGroup MouseGroup
     */
    public MouseGroup getMouseGroup()
    {
        return this.mouseGroup;
    }

    /**
     * 
     * @param mouseGroupIn MouseGroup
     */
    public void setMouseGroup(MouseGroup mouseGroupIn)
    {
        this.mouseGroup = mouseGroupIn;
    }

    /**
     * Returns <code>true</code> if the argument is an Mouse instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Mouse))
        {
            return false;
        }
        final Mouse that = (Mouse)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link Mouse}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link Mouse}.
         * @return new MouseImpl()
         */
        public static Mouse newInstance()
        {
            return new MouseImpl();
        }

        /**
         * Constructs a new instance of {@link Mouse}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param mouseGroup MouseGroup
         * @return newInstance
         */
        public static Mouse newInstance(MouseGroup mouseGroup)
        {
            final Mouse entity = new MouseImpl();
            entity.setMouseGroup(mouseGroup);
            return entity;
        }

        /**
         * Constructs a new instance of {@link Mouse}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param mouseNumber Integer
         * @param tumorVolume Double
         * @param logTumorVolume Double
         * @param mouseGroup MouseGroup
         * @return newInstance Mouse
         */
        public static Mouse newInstance(Integer mouseNumber, Double tumorVolume, Double logTumorVolume, MouseGroup mouseGroup)
        {
            final Mouse entity = new MouseImpl();
            entity.setMouseNumber(mouseNumber);
            entity.setTumorVolume(tumorVolume);
            entity.setLogTumorVolume(logTumorVolume);
            entity.setMouseGroup(mouseGroup);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(Mouse o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getMouseNumber() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getMouseNumber().compareTo(o.getMouseNumber()));
            }
            if (this.getTumorVolume() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getTumorVolume().compareTo(o.getTumorVolume()));
            }
            if (this.getLogTumorVolume() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getLogTumorVolume().compareTo(o.getLogTumorVolume()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}