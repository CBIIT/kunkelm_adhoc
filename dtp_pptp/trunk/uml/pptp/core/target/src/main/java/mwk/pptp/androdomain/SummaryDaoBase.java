// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package mwk.pptp.androdomain;

import java.security.Principal;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import mwk.pptp.PrincipalStore;
import mwk.pptp.PropertySearch;
import mwk.pptp.Search;
import mwk.pptp.SearchParameter;
import org.andromda.spring.PaginationResult;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.NonUniqueResultException;
import org.hibernate.Query;
import org.hibernate.ScrollableResults;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>Summary</code>.
 * </p>
 *
 * @see Summary
 */
public abstract class SummaryDaoBase
    extends HibernateDaoSupport
    implements SummaryDao
{
    /**
     * {@inheritDoc}
     */
    @Override
    public Object get(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Summary.get - 'id' can not be null");
        }
        final Object entity = this.getHibernateTemplate().get(SummaryImpl.class, id);
        return transformEntity(transform, (Summary)entity);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public Summary get(Long id)
    {
        return (Summary)this.get(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object load(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Summary.load - 'id' can not be null");
        }
        final Object entity = this.getHibernateTemplate().get(SummaryImpl.class, id);
        return transformEntity(transform, (Summary)entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary load(Long id)
    {
        return (Summary)this.load(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Summary> loadAll()
    {
        return (Collection<Summary>) this.loadAll(SummaryDao.TRANSFORM_NONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(SummaryDao.TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final Criteria criteria = this.getSession(false).createCriteria(SummaryImpl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final Collection<?> results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary create(Summary summary)
    {
        return (Summary)this.create(SummaryDao.TRANSFORM_NONE, summary);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(final int transform, final Summary summary)
    {
        if (summary == null)
        {
            throw new IllegalArgumentException(
                "Summary.create - 'summary' can not be null");
        }
        this.getHibernateTemplate().save(summary);
        return this.transformEntity(transform, summary);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<Summary> create(final Collection<Summary> entities)
    {
        return (Collection<Summary>) create(SummaryDao.TRANSFORM_NONE, entities);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> create(final int transform, final Collection<Summary> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Summary.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().executeWithNativeSession(
            new HibernateCallback()
            {
                public Object doInHibernate(Session session)
                    throws HibernateException
                {
                    for (Summary entity : entities)
                    {
                        create(transform, entity);
                    }
                    return null;
                }
            });
        return entities;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary create(
        Integer theN1,
        Integer theD1,
        Integer theE1,
        Integer theN2,
        Integer countMouseEvents,
        Double medianDaysToEvent,
        String thePValueFlag,
        Double thePValue,
        String efsTOverCFlag,
        Double efsTOverC,
        String medianRTVFlag,
        Double medianRTV,
        Double TOverC,
        Integer dayForTOverC,
        String theTOverCPValueFlag,
        Double theTOverCPValue,
        Integer countPD,
        Integer countPD1,
        Integer countPD2,
        Integer countSD,
        Integer countPR,
        Integer countCR,
        Integer countMCR,
        Double responseMedianScore,
        String overallGroupMedianResponse,
        Integer survivingPercent,
        Double averageRTVAtDayForTOverC)
    {
        return (Summary)this.create(SummaryDao.TRANSFORM_NONE, theN1, theD1, theE1, theN2, countMouseEvents, medianDaysToEvent, thePValueFlag, thePValue, efsTOverCFlag, efsTOverC, medianRTVFlag, medianRTV, TOverC, dayForTOverC, theTOverCPValueFlag, theTOverCPValue, countPD, countPD1, countPD2, countSD, countPR, countCR, countMCR, responseMedianScore, overallGroupMedianResponse, survivingPercent, averageRTVAtDayForTOverC);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        Integer theN1,
        Integer theD1,
        Integer theE1,
        Integer theN2,
        Integer countMouseEvents,
        Double medianDaysToEvent,
        String thePValueFlag,
        Double thePValue,
        String efsTOverCFlag,
        Double efsTOverC,
        String medianRTVFlag,
        Double medianRTV,
        Double TOverC,
        Integer dayForTOverC,
        String theTOverCPValueFlag,
        Double theTOverCPValue,
        Integer countPD,
        Integer countPD1,
        Integer countPD2,
        Integer countSD,
        Integer countPR,
        Integer countCR,
        Integer countMCR,
        Double responseMedianScore,
        String overallGroupMedianResponse,
        Integer survivingPercent,
        Double averageRTVAtDayForTOverC)
    {
        Summary entity = new SummaryImpl();
        entity.setTheN1(theN1);
        entity.setTheD1(theD1);
        entity.setTheE1(theE1);
        entity.setTheN2(theN2);
        entity.setCountMouseEvents(countMouseEvents);
        entity.setMedianDaysToEvent(medianDaysToEvent);
        entity.setThePValueFlag(thePValueFlag);
        entity.setThePValue(thePValue);
        entity.setEfsTOverCFlag(efsTOverCFlag);
        entity.setEfsTOverC(efsTOverC);
        entity.setMedianRTVFlag(medianRTVFlag);
        entity.setMedianRTV(medianRTV);
        entity.setTOverC(TOverC);
        entity.setDayForTOverC(dayForTOverC);
        entity.setTheTOverCPValueFlag(theTOverCPValueFlag);
        entity.setTheTOverCPValue(theTOverCPValue);
        entity.setCountPD(countPD);
        entity.setCountPD1(countPD1);
        entity.setCountPD2(countPD2);
        entity.setCountSD(countSD);
        entity.setCountPR(countPR);
        entity.setCountCR(countCR);
        entity.setCountMCR(countMCR);
        entity.setResponseMedianScore(responseMedianScore);
        entity.setOverallGroupMedianResponse(overallGroupMedianResponse);
        entity.setSurvivingPercent(survivingPercent);
        entity.setAverageRTVAtDayForTOverC(averageRTVAtDayForTOverC);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary create(
        CellLineGroup cellLineGroup,
        GroupRoleType groupRoleType,
        String overallGroupMedianResponse)
    {
        return (Summary)this.create(SummaryDao.TRANSFORM_NONE, cellLineGroup, groupRoleType, overallGroupMedianResponse);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        CellLineGroup cellLineGroup,
        GroupRoleType groupRoleType,
        String overallGroupMedianResponse)
    {
        Summary entity = new SummaryImpl();
        entity.setCellLineGroup(cellLineGroup);
        entity.setGroupRoleType(groupRoleType);
        entity.setOverallGroupMedianResponse(overallGroupMedianResponse);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(Summary summary)
    {
        if (summary == null)
        {
            throw new IllegalArgumentException(
                "Summary.update - 'summary' can not be null");
        }
        this.getHibernateTemplate().update(summary);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final Collection<Summary> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Summary.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().executeWithNativeSession(
            new HibernateCallback()
            {
                public Object doInHibernate(Session session)
                    throws HibernateException
                {
                    for (Summary entity : entities)
                    {
                        update(entity);
                    }
                    return null;
                }
            });
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Summary summary)
    {
        if (summary == null)
        {
            throw new IllegalArgumentException(
                "Summary.remove - 'summary' can not be null");
        }
        this.getHibernateTemplate().delete(summary);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Summary.remove - 'id' can not be null");
        }
        Summary entity = this.get(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Collection<Summary> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Summary.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>SummaryDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link SummaryDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see SummaryDao#transformEntity(int, Summary)
     */
    public Object transformEntity(final int transform, final Summary entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case SummaryDao.TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void transformEntities(final int transform, final Collection<?> entities)
    {
        switch (transform)
        {
            case SummaryDao.TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see SummaryDao#toEntities(Collection)
     */
    public void toEntities(final Collection<?> results)
    {
        if (results != null)
        {
            CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link Summary}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer ENTITYTRANSFORMER =
        new Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object[])
                {
                    result = toEntity((Object[])input);
                }
                else if (input instanceof Summary)
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return Summary
     */
    protected Summary toEntity(Object[] row)
    {
        Summary target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof Summary)
                {
                    target = (Summary)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public PaginationResult search(final int transform, final int pageNumber, final int pageSize, final Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final PropertySearch propertySearch = new PropertySearch(
                this.getSession(false), SummaryImpl.class, search);
            final List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new PaginationResult(results.toArray(new Object[results.size()]), propertySearch.getTotalCount());
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PaginationResult search(final int pageNumber, final int pageSize, final Search search)
    {
        return this.search(SummaryDao.TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Set<?> search(final int transform, final Search search)
    {
        try
        {
            final PropertySearch propertySearch = new PropertySearch(
                this.getSession(false), SummaryImpl.class, search);
            final Set<?> results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Set<Summary> search(final Search search)
    {
        return (Set<Summary>) this.search(SummaryDao.TRANSFORM_NONE, search);
    }

    /**
     * Executes and returns the given Hibernate queryObject as a {@link PaginationResult} instance.
     * @param queryObject
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @return PaginationResult
     */
    @SuppressWarnings({ "unchecked" })
    protected PaginationResult getPaginationResult(
        final Query queryObject,
        final int transform, int pageNumber, int pageSize)
    {
        try
        {
            final ScrollableResults scrollableResults = queryObject.scroll();
            scrollableResults.last();
            int totalCount = scrollableResults.getRowNumber();
            totalCount = totalCount >= 0 ? totalCount + 1 : 0;
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            // Unchecked transformation because Set object is reused, cannot be strongly typed.
            Set results = new LinkedHashSet(queryObject.list());
            transformEntities(transform, results);
            return new PaginationResult(results.toArray(new Object[results.size()]), totalCount);
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueTheN1(final Integer theN1)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("theN1",theN1,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueTheN1(final int transform, final Integer theN1)
    {
        final Summary entity=this.searchUniqueTheN1(theN1);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueTheD1(final Integer theD1)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("theD1",theD1,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueTheD1(final int transform, final Integer theD1)
    {
        final Summary entity=this.searchUniqueTheD1(theD1);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueTheE1(final Integer theE1)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("theE1",theE1,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueTheE1(final int transform, final Integer theE1)
    {
        final Summary entity=this.searchUniqueTheE1(theE1);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueTheN2(final Integer theN2)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("theN2",theN2,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueTheN2(final int transform, final Integer theN2)
    {
        final Summary entity=this.searchUniqueTheN2(theN2);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueCountMouseEvents(final Integer countMouseEvents)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("countMouseEvents",countMouseEvents,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueCountMouseEvents(final int transform, final Integer countMouseEvents)
    {
        final Summary entity=this.searchUniqueCountMouseEvents(countMouseEvents);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueMedianDaysToEvent(final Double medianDaysToEvent)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("medianDaysToEvent",medianDaysToEvent,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueMedianDaysToEvent(final int transform, final Double medianDaysToEvent)
    {
        final Summary entity=this.searchUniqueMedianDaysToEvent(medianDaysToEvent);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueThePValueFlag(final String thePValueFlag)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("thePValueFlag",thePValueFlag,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueThePValueFlag(final int transform, final String thePValueFlag)
    {
        final Summary entity=this.searchUniqueThePValueFlag(thePValueFlag);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueThePValue(final Double thePValue)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("thePValue",thePValue,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueThePValue(final int transform, final Double thePValue)
    {
        final Summary entity=this.searchUniqueThePValue(thePValue);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueEfsTOverCFlag(final String efsTOverCFlag)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("efsTOverCFlag",efsTOverCFlag,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueEfsTOverCFlag(final int transform, final String efsTOverCFlag)
    {
        final Summary entity=this.searchUniqueEfsTOverCFlag(efsTOverCFlag);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueEfsTOverC(final Double efsTOverC)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("efsTOverC",efsTOverC,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueEfsTOverC(final int transform, final Double efsTOverC)
    {
        final Summary entity=this.searchUniqueEfsTOverC(efsTOverC);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueMedianRTVFlag(final String medianRTVFlag)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("medianRTVFlag",medianRTVFlag,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueMedianRTVFlag(final int transform, final String medianRTVFlag)
    {
        final Summary entity=this.searchUniqueMedianRTVFlag(medianRTVFlag);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueMedianRTV(final Double medianRTV)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("medianRTV",medianRTV,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueMedianRTV(final int transform, final Double medianRTV)
    {
        final Summary entity=this.searchUniqueMedianRTV(medianRTV);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueTOverC(final Double TOverC)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("TOverC",TOverC,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueTOverC(final int transform, final Double TOverC)
    {
        final Summary entity=this.searchUniqueTOverC(TOverC);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueDayForTOverC(final Integer dayForTOverC)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("dayForTOverC",dayForTOverC,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueDayForTOverC(final int transform, final Integer dayForTOverC)
    {
        final Summary entity=this.searchUniqueDayForTOverC(dayForTOverC);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueTheTOverCPValueFlag(final String theTOverCPValueFlag)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("theTOverCPValueFlag",theTOverCPValueFlag,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueTheTOverCPValueFlag(final int transform, final String theTOverCPValueFlag)
    {
        final Summary entity=this.searchUniqueTheTOverCPValueFlag(theTOverCPValueFlag);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueTheTOverCPValue(final Double theTOverCPValue)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("theTOverCPValue",theTOverCPValue,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueTheTOverCPValue(final int transform, final Double theTOverCPValue)
    {
        final Summary entity=this.searchUniqueTheTOverCPValue(theTOverCPValue);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueCountPD(final Integer countPD)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("countPD",countPD,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueCountPD(final int transform, final Integer countPD)
    {
        final Summary entity=this.searchUniqueCountPD(countPD);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueCountPD1(final Integer countPD1)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("countPD1",countPD1,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueCountPD1(final int transform, final Integer countPD1)
    {
        final Summary entity=this.searchUniqueCountPD1(countPD1);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueCountPD2(final Integer countPD2)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("countPD2",countPD2,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueCountPD2(final int transform, final Integer countPD2)
    {
        final Summary entity=this.searchUniqueCountPD2(countPD2);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueCountSD(final Integer countSD)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("countSD",countSD,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueCountSD(final int transform, final Integer countSD)
    {
        final Summary entity=this.searchUniqueCountSD(countSD);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueCountPR(final Integer countPR)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("countPR",countPR,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueCountPR(final int transform, final Integer countPR)
    {
        final Summary entity=this.searchUniqueCountPR(countPR);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueCountCR(final Integer countCR)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("countCR",countCR,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueCountCR(final int transform, final Integer countCR)
    {
        final Summary entity=this.searchUniqueCountCR(countCR);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueCountMCR(final Integer countMCR)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("countMCR",countMCR,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueCountMCR(final int transform, final Integer countMCR)
    {
        final Summary entity=this.searchUniqueCountMCR(countMCR);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueResponseMedianScore(final Double responseMedianScore)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("responseMedianScore",responseMedianScore,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueResponseMedianScore(final int transform, final Double responseMedianScore)
    {
        final Summary entity=this.searchUniqueResponseMedianScore(responseMedianScore);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueOverallGroupMedianResponse(final String overallGroupMedianResponse)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("overallGroupMedianResponse",overallGroupMedianResponse,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueOverallGroupMedianResponse(final int transform, final String overallGroupMedianResponse)
    {
        final Summary entity=this.searchUniqueOverallGroupMedianResponse(overallGroupMedianResponse);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueSurvivingPercent(final Integer survivingPercent)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("survivingPercent",survivingPercent,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueSurvivingPercent(final int transform, final Integer survivingPercent)
    {
        final Summary entity=this.searchUniqueSurvivingPercent(survivingPercent);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Summary searchUniqueAverageRTVAtDayForTOverC(final Double averageRTVAtDayForTOverC)
    {
        final Search search=new Search(
            new SearchParameter[]{
                new SearchParameter("averageRTVAtDayForTOverC",averageRTVAtDayForTOverC,SearchParameter.EQUAL_COMPARATOR)
            }
        );

        final Set<Summary> searchResult=this.search(search);
        switch(searchResult.size())
        {
            case 0: return null;
            case 1: return searchResult.iterator().next();
            default: throw new NonUniqueResultException(searchResult.size());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object searchUniqueAverageRTVAtDayForTOverC(final int transform, final Double averageRTVAtDayForTOverC)
    {
        final Summary entity=this.searchUniqueAverageRTVAtDayForTOverC(averageRTVAtDayForTOverC);
        if(entity == null)
        {
            return null;
        }
        return transformEntity(transform, entity);
    }

    // spring-hibernate-dao-base merge-point
}