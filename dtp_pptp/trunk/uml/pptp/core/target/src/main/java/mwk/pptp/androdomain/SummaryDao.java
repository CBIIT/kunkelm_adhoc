// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package mwk.pptp.androdomain;

import java.util.Collection;
import java.util.Set;
import mwk.pptp.Search;
import org.andromda.spring.PaginationResult;

/**
 *
 * @see Summary
 */
public interface SummaryDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public static final int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link Summary}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param results the query results.
     */
    public void toEntities(final Collection<?> results);

    /**
     * Gets an instance of Summary from the persistent store.
     * @param id
     * @return Summary
     */
    public Summary get(Long id);

    /**
     * <p>
     * Does the same thing as {@link #get(Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to get.
     * @return either the entity or the object transformed from the entity.
     */
    public Object get(int transform, Long id);

    /**
     * Loads an instance of Summary from the persistent store.
     * @param id
     * @return Summary
     */
    public Summary load(Long id);

    /**
     * <p>
     * Does the same thing as {@link #load(Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, Long id);

    /**
     * Loads all entities of type {@link Summary}.
     *
     * @return the loaded entities.
     */
    public Collection<Summary> loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of Summary and adds it to the persistent store.
     * @param summary
     * @return Summary
     */
    public Summary create(Summary summary);

    /**
     * <p>
     * Does the same thing as {@link #create(Summary)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param summary
     * @return Object
     */
    public Object create(int transform, Summary summary);

    /**
     * Creates a new instance of Summary and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of Summary
     * instances to create.
     *
     * @return the created instances.
     */
    public Collection<Summary> create(Collection<Summary> entities);

    /**
     * <p>
     * Does the same thing as {@link #create(Summary)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param entities
     * @return Collection
     */
    public Collection<?> create(int transform, Collection<Summary> entities);

    /**
     * <p>
     * Creates a new <code>Summary</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     * @param theN1 
     * @param theD1 
     * @param theE1 
     * @param theN2 
     * @param countMouseEvents 
     * @param medianDaysToEvent 
     * @param thePValueFlag 
     * @param thePValue 
     * @param efsTOverCFlag 
     * @param efsTOverC 
     * @param medianRTVFlag 
     * @param medianRTV 
     * @param TOverC 
     * @param dayForTOverC 
     * @param theTOverCPValueFlag 
     * @param theTOverCPValue 
     * @param countPD 
     * @param countPD1 
     * @param countPD2 
     * @param countSD 
     * @param countPR 
     * @param countCR 
     * @param countMCR 
     * @param responseMedianScore 
     * @param overallGroupMedianResponse 
     * @param survivingPercent 
     * @param averageRTVAtDayForTOverC 
     * @return Summary
     */
    public Summary create(
        Integer theN1,
        Integer theD1,
        Integer theE1,
        Integer theN2,
        Integer countMouseEvents,
        Double medianDaysToEvent,
        String thePValueFlag,
        Double thePValue,
        String efsTOverCFlag,
        Double efsTOverC,
        String medianRTVFlag,
        Double medianRTV,
        Double TOverC,
        Integer dayForTOverC,
        String theTOverCPValueFlag,
        Double theTOverCPValue,
        Integer countPD,
        Integer countPD1,
        Integer countPD2,
        Integer countSD,
        Integer countPR,
        Integer countCR,
        Integer countMCR,
        Double responseMedianScore,
        String overallGroupMedianResponse,
        Integer survivingPercent,
        Double averageRTVAtDayForTOverC);

    /**
     * <p>
     * Does the same thing as {@link #create(Integer, Integer, Integer, Integer, Integer, Double, String, Double, String, Double, String, Double, Double, Integer, String, Double, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Double, String, Integer, Double)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param theN1 
     * @param theD1 
     * @param theE1 
     * @param theN2 
     * @param countMouseEvents 
     * @param medianDaysToEvent 
     * @param thePValueFlag 
     * @param thePValue 
     * @param efsTOverCFlag 
     * @param efsTOverC 
     * @param medianRTVFlag 
     * @param medianRTV 
     * @param TOverC 
     * @param dayForTOverC 
     * @param theTOverCPValueFlag 
     * @param theTOverCPValue 
     * @param countPD 
     * @param countPD1 
     * @param countPD2 
     * @param countSD 
     * @param countPR 
     * @param countCR 
     * @param countMCR 
     * @param responseMedianScore 
     * @param overallGroupMedianResponse 
     * @param survivingPercent 
     * @param averageRTVAtDayForTOverC 
     * @return Summary
     */
    public Object create(
        int transform,
        Integer theN1,
        Integer theD1,
        Integer theE1,
        Integer theN2,
        Integer countMouseEvents,
        Double medianDaysToEvent,
        String thePValueFlag,
        Double thePValue,
        String efsTOverCFlag,
        Double efsTOverC,
        String medianRTVFlag,
        Double medianRTV,
        Double TOverC,
        Integer dayForTOverC,
        String theTOverCPValueFlag,
        Double theTOverCPValue,
        Integer countPD,
        Integer countPD1,
        Integer countPD2,
        Integer countSD,
        Integer countPR,
        Integer countCR,
        Integer countMCR,
        Double responseMedianScore,
        String overallGroupMedianResponse,
        Integer survivingPercent,
        Double averageRTVAtDayForTOverC);

    /**
     * <p>
     * Creates a new <code>Summary</code>
     * instance from only <strong>required</strong> properties (attributes
     * and association ends) and adds it to the persistent store.
     * </p>
     * @param cellLineGroup
     * @param groupRoleType
     * @param overallGroupMedianResponse
     * @return Summary
     */
    public Summary create(
        CellLineGroup cellLineGroup,
        GroupRoleType groupRoleType,
        String overallGroupMedianResponse);

    /**
     * <p>
     * Does the same thing as {@link #create(String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform flag to determine transformation type.
     * @param cellLineGroup
     * @param groupRoleType
     * @param overallGroupMedianResponse
     * @return Object
     */
    public Object create(
        int transform,
        CellLineGroup cellLineGroup,
        GroupRoleType groupRoleType,
        String overallGroupMedianResponse);

    /**
     * Updates the <code>summary</code> instance in the persistent store.
     * @param summary
     */
    public void update(Summary summary);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     * @param entities
     */
    public void update(Collection<Summary> entities);

    /**
     * Removes the instance of Summary from the persistent store.
     * @param summary
     */
    public void remove(Summary summary);

    /**
     * Removes the instance of Summary having the given
     * <code>identifier</code> from the persistent store.
     * @param id
     */
    public void remove(Long id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     * @param entities
     */
    public void remove(Collection<Summary> entities);


    /**
     * Does the same thing as {@link #search(int, Search)} but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param transform the transformation flag.
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link PaginationResult} instance.
     */
    public PaginationResult search(final int transform, final int pageNumber, final int pageSize, final Search search);

    /**
     * Does the same thing as {@link #search(Search)} but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link PaginationResult} instance.
     */
    public PaginationResult search(final int pageNumber, final int pageSize, final Search search);

    /**
     * Does the same thing as {@link #search(Search)} but with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     *
     * @param transform the transformation flag.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public Set<?> search(final int transform, final Search search);

    /**
     * Performs a search using the parameters specified in the given <code>search</code> object.
     *
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public Set<Summary> search(final Search search);

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>mwk.pptp.androdomain.SummaryDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link mwk.pptp.androdomain.SummaryDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,Collection)
     */
    public Object transformEntity(final int transform, final Summary entity);

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,Summary)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>mwk.pptp.androdomain.SummaryDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,Summary)
     */
    public void transformEntities(final int transform, final Collection<?> entities);

    /**
     * Searches for a single instance of Summary.
     * @param theN1 the unique theN1 to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueTheN1(final Integer theN1);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param theN1 the unique theN1 to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueTheN1(final int transform, final Integer theN1);

    /**
     * Searches for a single instance of Summary.
     * @param theD1 the unique theD1 to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueTheD1(final Integer theD1);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param theD1 the unique theD1 to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueTheD1(final int transform, final Integer theD1);

    /**
     * Searches for a single instance of Summary.
     * @param theE1 the unique theE1 to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueTheE1(final Integer theE1);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param theE1 the unique theE1 to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueTheE1(final int transform, final Integer theE1);

    /**
     * Searches for a single instance of Summary.
     * @param theN2 the unique theN2 to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueTheN2(final Integer theN2);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param theN2 the unique theN2 to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueTheN2(final int transform, final Integer theN2);

    /**
     * Searches for a single instance of Summary.
     * @param countMouseEvents the unique countMouseEvents to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueCountMouseEvents(final Integer countMouseEvents);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param countMouseEvents the unique countMouseEvents to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueCountMouseEvents(final int transform, final Integer countMouseEvents);

    /**
     * Searches for a single instance of Summary.
     * @param medianDaysToEvent the unique medianDaysToEvent to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueMedianDaysToEvent(final Double medianDaysToEvent);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param medianDaysToEvent the unique medianDaysToEvent to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueMedianDaysToEvent(final int transform, final Double medianDaysToEvent);

    /**
     * Searches for a single instance of Summary.
     * @param thePValueFlag the unique thePValueFlag to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueThePValueFlag(final String thePValueFlag);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param thePValueFlag the unique thePValueFlag to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueThePValueFlag(final int transform, final String thePValueFlag);

    /**
     * Searches for a single instance of Summary.
     * @param thePValue the unique thePValue to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueThePValue(final Double thePValue);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param thePValue the unique thePValue to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueThePValue(final int transform, final Double thePValue);

    /**
     * Searches for a single instance of Summary.
     * @param efsTOverCFlag the unique efsTOverCFlag to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueEfsTOverCFlag(final String efsTOverCFlag);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param efsTOverCFlag the unique efsTOverCFlag to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueEfsTOverCFlag(final int transform, final String efsTOverCFlag);

    /**
     * Searches for a single instance of Summary.
     * @param efsTOverC the unique efsTOverC to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueEfsTOverC(final Double efsTOverC);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param efsTOverC the unique efsTOverC to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueEfsTOverC(final int transform, final Double efsTOverC);

    /**
     * Searches for a single instance of Summary.
     * @param medianRTVFlag the unique medianRTVFlag to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueMedianRTVFlag(final String medianRTVFlag);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param medianRTVFlag the unique medianRTVFlag to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueMedianRTVFlag(final int transform, final String medianRTVFlag);

    /**
     * Searches for a single instance of Summary.
     * @param medianRTV the unique medianRTV to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueMedianRTV(final Double medianRTV);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param medianRTV the unique medianRTV to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueMedianRTV(final int transform, final Double medianRTV);

    /**
     * Searches for a single instance of Summary.
     * @param TOverC the unique TOverC to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueTOverC(final Double TOverC);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param TOverC the unique TOverC to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueTOverC(final int transform, final Double TOverC);

    /**
     * Searches for a single instance of Summary.
     * @param dayForTOverC the unique dayForTOverC to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueDayForTOverC(final Integer dayForTOverC);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param dayForTOverC the unique dayForTOverC to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueDayForTOverC(final int transform, final Integer dayForTOverC);

    /**
     * Searches for a single instance of Summary.
     * @param theTOverCPValueFlag the unique theTOverCPValueFlag to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueTheTOverCPValueFlag(final String theTOverCPValueFlag);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param theTOverCPValueFlag the unique theTOverCPValueFlag to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueTheTOverCPValueFlag(final int transform, final String theTOverCPValueFlag);

    /**
     * Searches for a single instance of Summary.
     * @param theTOverCPValue the unique theTOverCPValue to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueTheTOverCPValue(final Double theTOverCPValue);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param theTOverCPValue the unique theTOverCPValue to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueTheTOverCPValue(final int transform, final Double theTOverCPValue);

    /**
     * Searches for a single instance of Summary.
     * @param countPD the unique countPD to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueCountPD(final Integer countPD);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param countPD the unique countPD to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueCountPD(final int transform, final Integer countPD);

    /**
     * Searches for a single instance of Summary.
     * @param countPD1 the unique countPD1 to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueCountPD1(final Integer countPD1);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param countPD1 the unique countPD1 to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueCountPD1(final int transform, final Integer countPD1);

    /**
     * Searches for a single instance of Summary.
     * @param countPD2 the unique countPD2 to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueCountPD2(final Integer countPD2);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param countPD2 the unique countPD2 to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueCountPD2(final int transform, final Integer countPD2);

    /**
     * Searches for a single instance of Summary.
     * @param countSD the unique countSD to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueCountSD(final Integer countSD);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param countSD the unique countSD to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueCountSD(final int transform, final Integer countSD);

    /**
     * Searches for a single instance of Summary.
     * @param countPR the unique countPR to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueCountPR(final Integer countPR);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param countPR the unique countPR to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueCountPR(final int transform, final Integer countPR);

    /**
     * Searches for a single instance of Summary.
     * @param countCR the unique countCR to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueCountCR(final Integer countCR);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param countCR the unique countCR to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueCountCR(final int transform, final Integer countCR);

    /**
     * Searches for a single instance of Summary.
     * @param countMCR the unique countMCR to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueCountMCR(final Integer countMCR);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param countMCR the unique countMCR to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueCountMCR(final int transform, final Integer countMCR);

    /**
     * Searches for a single instance of Summary.
     * @param responseMedianScore the unique responseMedianScore to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueResponseMedianScore(final Double responseMedianScore);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param responseMedianScore the unique responseMedianScore to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueResponseMedianScore(final int transform, final Double responseMedianScore);

    /**
     * Searches for a single instance of Summary.
     * @param overallGroupMedianResponse the unique overallGroupMedianResponse to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueOverallGroupMedianResponse(final String overallGroupMedianResponse);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param overallGroupMedianResponse the unique overallGroupMedianResponse to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueOverallGroupMedianResponse(final int transform, final String overallGroupMedianResponse);

    /**
     * Searches for a single instance of Summary.
     * @param survivingPercent the unique survivingPercent to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueSurvivingPercent(final Integer survivingPercent);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param survivingPercent the unique survivingPercent to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueSurvivingPercent(final int transform, final Integer survivingPercent);

    /**
     * Searches for a single instance of Summary.
     * @param averageRTVAtDayForTOverC the unique averageRTVAtDayForTOverC to be used in the search.'
     * @return a single instance of Summary.
     */
    public Summary searchUniqueAverageRTVAtDayForTOverC(final Double averageRTVAtDayForTOverC);

    /**
     * Searches for a single instance of Summary.
     * @param transform the transformation flag.
     * @param averageRTVAtDayForTOverC the unique averageRTVAtDayForTOverC to be used in the search.
     * @return a value object according the transformation flag.
     */
    public Object searchUniqueAverageRTVAtDayForTOverC(final int transform, final Double averageRTVAtDayForTOverC);

    // spring-dao merge-point
}