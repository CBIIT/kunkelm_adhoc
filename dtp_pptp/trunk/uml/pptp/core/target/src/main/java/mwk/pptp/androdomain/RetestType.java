// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package mwk.pptp.androdomain;

import java.io.Serializable;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class RetestType
    implements Serializable, Comparable<RetestType>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 5458324966537413925L;

    // Generate 5 attributes
    private String compoundIdentifier;

    /**
     * 
     * @return this.compoundIdentifier String
     */
    public String getCompoundIdentifier()
    {
        return this.compoundIdentifier;
    }

    /**
     * 
     * @param compoundIdentifierIn String
     */
    public void setCompoundIdentifier(String compoundIdentifierIn)
    {
        this.compoundIdentifier = compoundIdentifierIn;
    }

    private Double dose;

    /**
     * 
     * @return this.dose Double
     */
    public Double getDose()
    {
        return this.dose;
    }

    /**
     * 
     * @param doseIn Double
     */
    public void setDose(Double doseIn)
    {
        this.dose = doseIn;
    }

    private String cellLineIdentifier;

    /**
     * 
     * @return this.cellLineIdentifier String
     */
    public String getCellLineIdentifier()
    {
        return this.cellLineIdentifier;
    }

    /**
     * 
     * @param cellLineIdentifierIn String
     */
    public void setCellLineIdentifier(String cellLineIdentifierIn)
    {
        this.cellLineIdentifier = cellLineIdentifierIn;
    }

    private Integer testNumber;

    /**
     * 
     * @return this.testNumber Integer
     */
    public Integer getTestNumber()
    {
        return this.testNumber;
    }

    /**
     * 
     * @param testNumberIn Integer
     */
    public void setTestNumber(Integer testNumberIn)
    {
        this.testNumber = testNumberIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 0 associations
    /**
     * Returns <code>true</code> if the argument is an RetestType instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof RetestType))
        {
            return false;
        }
        final RetestType that = (RetestType)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link RetestType}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link RetestType}.
         * @return new RetestTypeImpl()
         */
        public static RetestType newInstance()
        {
            return new RetestTypeImpl();
        }

        /**
         * Constructs a new instance of {@link RetestType}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param compoundIdentifier String
         * @param cellLineIdentifier String
         * @return newInstance
         */
        public static RetestType newInstance(String compoundIdentifier, String cellLineIdentifier)
        {
            final RetestType entity = new RetestTypeImpl();
            entity.setCompoundIdentifier(compoundIdentifier);
            entity.setCellLineIdentifier(cellLineIdentifier);
            return entity;
        }

        /**
         * Constructs a new instance of {@link RetestType}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param compoundIdentifier String
         * @param dose Double
         * @param cellLineIdentifier String
         * @param testNumber Integer
         * @return newInstance RetestType
         */
        public static RetestType newInstance(String compoundIdentifier, Double dose, String cellLineIdentifier, Integer testNumber)
        {
            final RetestType entity = new RetestTypeImpl();
            entity.setCompoundIdentifier(compoundIdentifier);
            entity.setDose(dose);
            entity.setCellLineIdentifier(cellLineIdentifier);
            entity.setTestNumber(testNumber);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(RetestType o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getCompoundIdentifier() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCompoundIdentifier().compareTo(o.getCompoundIdentifier()));
            }
            if (this.getDose() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDose().compareTo(o.getDose()));
            }
            if (this.getCellLineIdentifier() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCellLineIdentifier().compareTo(o.getCellLineIdentifier()));
            }
            if (this.getTestNumber() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getTestNumber().compareTo(o.getTestNumber()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}