// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package mwk.pptp.androdomain;

import java.io.Serializable;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class CellLineMaster
    implements Serializable, Comparable<CellLineMaster>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 2525062597709239446L;

    // Generate 4 attributes
    private String pptpIdentifier;

    /**
     * 
     * @return this.pptpIdentifier String
     */
    public String getPptpIdentifier()
    {
        return this.pptpIdentifier;
    }

    /**
     * 
     * @param pptpIdentifierIn String
     */
    public void setPptpIdentifier(String pptpIdentifierIn)
    {
        this.pptpIdentifier = pptpIdentifierIn;
    }

    private String strain;

    /**
     * 
     * @return this.strain String
     */
    public String getStrain()
    {
        return this.strain;
    }

    /**
     * 
     * @param strainIn String
     */
    public void setStrain(String strainIn)
    {
        this.strain = strainIn;
    }

    private String implantSite;

    /**
     * 
     * @return this.implantSite String
     */
    public String getImplantSite()
    {
        return this.implantSite;
    }

    /**
     * 
     * @param implantSiteIn String
     */
    public void setImplantSite(String implantSiteIn)
    {
        this.implantSite = implantSiteIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 0 associations
    /**
     * Returns <code>true</code> if the argument is an CellLineMaster instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof CellLineMaster))
        {
            return false;
        }
        final CellLineMaster that = (CellLineMaster)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link CellLineMaster}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link CellLineMaster}.
         * @return new CellLineMasterImpl()
         */
        public static CellLineMaster newInstance()
        {
            return new CellLineMasterImpl();
        }


        /**
         * Constructs a new instance of {@link CellLineMaster}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param pptpIdentifier String
         * @param strain String
         * @param implantSite String
         * @return newInstance CellLineMaster
         */
        public static CellLineMaster newInstance(String pptpIdentifier, String strain, String implantSite)
        {
            final CellLineMaster entity = new CellLineMasterImpl();
            entity.setPptpIdentifier(pptpIdentifier);
            entity.setStrain(strain);
            entity.setImplantSite(implantSite);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(CellLineMaster o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getPptpIdentifier() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getPptpIdentifier().compareTo(o.getPptpIdentifier()));
            }
            if (this.getStrain() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStrain().compareTo(o.getStrain()));
            }
            if (this.getImplantSite() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getImplantSite().compareTo(o.getImplantSite()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}