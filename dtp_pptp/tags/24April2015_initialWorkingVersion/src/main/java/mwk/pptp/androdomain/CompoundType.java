// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package mwk.pptp.androdomain;

import java.io.Serializable;
import java.util.Collection;
import java.util.HashSet;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class CompoundType
    implements Serializable, Comparable<CompoundType>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -7893499006669078660L;

    // Generate 3 attributes
    private String pptpIdentifier;

    /**
     * 
     * @return this.pptpIdentifier String
     */
    public String getPptpIdentifier()
    {
        return this.pptpIdentifier;
    }

    /**
     * 
     * @param pptpIdentifierIn String
     */
    public void setPptpIdentifier(String pptpIdentifierIn)
    {
        this.pptpIdentifier = pptpIdentifierIn;
    }

    private String name;

    /**
     * 
     * @return this.name String
     */
    public String getName()
    {
        return this.name;
    }

    /**
     * 
     * @param nameIn String
     */
    public void setName(String nameIn)
    {
        this.name = nameIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 1 associations
    private Collection<MtdStudy> mtdStudies = new HashSet<MtdStudy>();

    /**
     * 
     * @return this.mtdStudies Collection<MtdStudy>
     */
    public Collection<MtdStudy> getMtdStudies()
    {
        return this.mtdStudies;
    }

    /**
     * 
     * @param mtdStudiesIn Collection<MtdStudy>
     */
    public void setMtdStudies(Collection<MtdStudy> mtdStudiesIn)
    {
        this.mtdStudies = mtdStudiesIn;
    }

    /**
     * 
     * @param elementToAdd MtdStudy
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addMtdStudies(MtdStudy elementToAdd)
    {
        return this.mtdStudies.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove MtdStudy
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeMtdStudies(MtdStudy elementToRemove)
    {
        return this.mtdStudies.remove(elementToRemove);
    }

    /**
     * Returns <code>true</code> if the argument is an CompoundType instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof CompoundType))
        {
            return false;
        }
        final CompoundType that = (CompoundType)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link CompoundType}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link CompoundType}.
         * @return new CompoundTypeImpl()
         */
        public static CompoundType newInstance()
        {
            return new CompoundTypeImpl();
        }

        /**
         * Constructs a new instance of {@link CompoundType}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param pptpIdentifier String
         * @param name String
         * @return newInstance
         */
        public static CompoundType newInstance(String pptpIdentifier, String name)
        {
            final CompoundType entity = new CompoundTypeImpl();
            entity.setPptpIdentifier(pptpIdentifier);
            entity.setName(name);
            return entity;
        }

        /**
         * Constructs a new instance of {@link CompoundType}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param pptpIdentifier String
         * @param name String
         * @param mtdStudies Collection<MtdStudy>
         * @return newInstance CompoundType
         */
        public static CompoundType newInstance(String pptpIdentifier, String name, Collection<MtdStudy> mtdStudies)
        {
            final CompoundType entity = new CompoundTypeImpl();
            entity.setPptpIdentifier(pptpIdentifier);
            entity.setName(name);
            entity.setMtdStudies(mtdStudies);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(CompoundType o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getPptpIdentifier() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getPptpIdentifier().compareTo(o.getPptpIdentifier()));
            }
            if (this.getName() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getName().compareTo(o.getName()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}